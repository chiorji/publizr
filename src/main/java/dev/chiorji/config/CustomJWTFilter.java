package dev.chiorji.config;import com.auth0.jwt.*;import com.auth0.jwt.algorithms.*;import com.auth0.jwt.exceptions.*;import com.auth0.jwt.interfaces.*;import jakarta.servlet.*;import jakarta.servlet.http.*;import java.io.*;import java.util.*;import org.apache.logging.log4j.*;import org.springframework.http.*;import org.springframework.web.filter.*;public class CustomJWTFilter extends GenericFilterBean {	private static final Logger log = LogManager.getLogger(CustomJWTFilter.class);	private final String secretKey;	private final String tokenIssuer;	public CustomJWTFilter(String secretKey, String tokenIssuer) {		this.secretKey = secretKey;		this.tokenIssuer = tokenIssuer;	}	@Override	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {		HttpServletRequest httpServletRequest = (HttpServletRequest) request;		HttpServletResponse httpServletResponse = (HttpServletResponse) response;		log.info("CustomJWTFilter: Intercepting request");		String authHeader = httpServletRequest.getHeader("Authorization");		log.info("Authorization Header: {}", authHeader);		String token = extractToken(httpServletRequest);		if (token.isBlank()) {			log.error("No JWT token found in the request");			httpServletResponse.sendError(HttpStatus.UNAUTHORIZED.value(), "Missing JWT token");			return;		}		log.info("Extracted JWT Token: {}", token);		DecodedJWT isValidToken = verifyJWTToken(token);		if (isValidToken == null) {			log.error("Invalid or expired JWT token");			httpServletResponse.sendError(HttpStatus.FORBIDDEN.value(), "Invalid or expired JWT token");			return;		}		try {			Map<String, Claim> claims = extractJWTClaims(token);			log.info("Extracted claims: {}", claims);			httpServletRequest.setAttribute("claims", claims);		} catch (Exception e) {			log.error("JWT Decoding Error: {}", e.getMessage());			httpServletResponse.sendError(HttpStatus.FORBIDDEN.value(), "Invalid or expired JWT token");			return;		}		chain.doFilter(httpServletRequest, httpServletResponse);	}	private String extractToken(HttpServletRequest request) {		String header = request.getHeader("Authorization");		return header.replace("Bearer ", "");	}	private DecodedJWT verifyJWTToken(String jwtToken) {		try {			Algorithm algorithm = Algorithm.HMAC256(secretKey);			return JWT.require(algorithm).withIssuer(tokenIssuer).build().verify(jwtToken);		} catch (JWTVerificationException e) {			throw new RuntimeException(e);		}	}	private Map<String, Claim> extractJWTClaims(String jwtToken) {		Algorithm algorithm = Algorithm.HMAC256(secretKey);		return JWT.require(algorithm).withIssuer(tokenIssuer).build().verify(jwtToken).getClaims();	}}