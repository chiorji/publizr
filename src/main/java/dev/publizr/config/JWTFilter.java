package dev.publizr.config;import com.auth0.jwt.JWT;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.exceptions.JWTVerificationException;import com.auth0.jwt.interfaces.Claim;import com.auth0.jwt.interfaces.DecodedJWT;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.ServletRequest;import jakarta.servlet.ServletResponse;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.web.filter.GenericFilterBean;import java.io.IOException;public class JWTFilter extends GenericFilterBean {	@Value("${secret.key}")	private String secretKey;	@Value("${secret.token.issuer}")	private String tokenIssuer;	@Override	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {		HttpServletRequest httpServletRequest = (HttpServletRequest) request;		HttpServletResponse httpServletResponse = (HttpServletResponse) response;		logger.info("Filtering request: " + httpServletRequest.getRequestURI());		logger.info("Method: " + httpServletRequest.getMethod());		logger.info("Request Header: " + httpServletRequest.getHeader("Authorization"));		String token = this.getBearerTokenFromRequest((HttpServletRequest) request);		logger.info("Token: " + token);		if (token == null) {			httpServletResponse.sendError(HttpStatus.FORBIDDEN.value(), "MISSING AUTHORIZATION TOKEN");			return;		}		try {			DecodedJWT decodedJWT = this.validateJWTToken(token);			Claim id = decodedJWT.getClaim("id");			Claim username = decodedJWT.getClaim("username");			Claim email = decodedJWT.getClaim("email");			httpServletRequest.setAttribute("id", id);			httpServletRequest.setAttribute("email", email);			httpServletRequest.setAttribute("username", username);		} catch (RuntimeException e) {			httpServletResponse.sendError(HttpStatus.FORBIDDEN.value(), "INVALID OR EXPIRED AUTHORIZATION TOKEN");			return;		}		chain.doFilter(httpServletRequest, httpServletResponse);	}	private String getBearerTokenFromRequest(HttpServletRequest request) {		String header = request.getHeader("Authorization");		logger.info("Header: " + header);		if (header == null) return null;		return header.replace("Bearer ", "");	}	private DecodedJWT validateJWTToken(String jwtToken) {		try {			Algorithm algorithm = Algorithm.HMAC256(secretKey);			return JWT.require(algorithm)				.withIssuer(tokenIssuer)				.build()				.verify(jwtToken);		} catch (JWTVerificationException e) {			throw new RuntimeException(e);		}	}}