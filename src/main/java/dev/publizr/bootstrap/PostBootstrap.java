package dev.publizr.bootstrap;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import dev.publizr.post.PostRepository;import dev.publizr.post.models.Post;import dev.publizr.post.models.PostRunner;import jakarta.annotation.Priority;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.CommandLineRunner;import org.springframework.core.Ordered;import org.springframework.stereotype.Component;import java.io.InputStream;@Component@Priority(Ordered.LOWEST_PRECEDENCE)public class PostBootstrap implements CommandLineRunner {	private final PostRepository postRepository;	private final ObjectMapper objectMapper;	private static final Logger log = LoggerFactory.getLogger(PostBootstrap.class);	public PostBootstrap(PostRepository postRepository, ObjectMapper objectMapper) {		this.postRepository = postRepository;		this.objectMapper = objectMapper;	}	@Override	public void run(String... args) throws Exception {		long size = postRepository.list().size();		if (size == 0) {			log.warn("No post found in the database, adding default posts....");			try (InputStream inputStream = TypeReference.class.getResourceAsStream("/data/posts.json")) {				PostRunner posts = objectMapper.readValue(inputStream, PostRunner.class);				for (Post post : posts.posts()) {					Integer postId = postRepository.save(post);					log.info("Default post published with with ID {}", postId);				}			} catch (RuntimeException e) {				log.error("No post was loaded, database already contain posts.");				throw new RuntimeException(e);			}		} else {			log.info("Database already contain post(s), skipping...");		}	}}